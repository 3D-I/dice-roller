#!/usr/bin/env php
<?php

ini_set('display_errors', 'stderr');

use Bakame\DiceRoller\ExpressionParser;
use Bakame\DiceRoller\Factory;
use Bakame\DiceRoller\LogProfiler;
use Bakame\DiceRoller\MemoryLogger;
use Psr\Log\LogLevel;

function writeln(string $message, $output = STDOUT): void
{
    fwrite($output, $message . PHP_EOL);
}

function fail(string $message, int $exitCode): void
{
    writeln($message, STDERR);

    exit($exitCode);
}

function autoload(string $errorMessage): void
{
    for ($i = 1; $i <= 5; $i++) {
        if (is_dir($vendor = dirname(__DIR__, $i).'/vendor')) {
            require $vendor.'/autoload.php';

            return;
        }
    }

    fail($errorMessage, 1);
}

function flushLogger(MemoryLogger $logger, string $format): void
{
    foreach ($logger->getLogs(LogLevel::DEBUG) as $log) {
        writeln(sprintf($format, $log));
    }

    $logger->clear();
}

/**
 * CLI colors
 */
$cyan = chr(27)."[36m";
$green = chr(27)."[32m";
$reset = chr(27)."[0m";
$redbg = chr(27)."[41m";
$yellow = chr(27)."[33m";

$dependencyError = <<<ERROR
$redbg
    You must set up the project dependencies, using composer
    run composer install
$reset
ERROR;

$parseErrorMessage = <<<PARSERROR
$redbg
    The submitted dice annotation $yellow%s$reset could
    not be parsed, the following error occured :

    %s
$reset
PARSERROR;

$script = basename(__FILE__);
$helpText = <<<HELP
$yellow
Bakame\DiceRoller v1.0 $reset

Common let's roll the dice: you put your ðŸŽ²ðŸŽ²ðŸŽ² in the cup, you shake it and then you get the result.
=====

Usage: $yellow$script [OPTIONS] [EXPRESSION]$reset

$green--iteration$reset submit the number of time the pool must be roll ({$yellow}default:$reset 1)
$green-h, --help$reset  show the following help message
$green--info$reset      show the pool information
$green--logs$reset      show the command logs

Examples:

     Getting the result of a single roll
     $yellow$script 2D+6$reset
     
     Getting the result of multiple roll and its associated trace 
     $yellow$script --iteration=4 --logs 2D+6$reset
     
     Getting the roll information
     $yellow$script --info 2D+6$reset
HELP;

$rollableInfo = <<<INFO
$yellow ====== ROLL INFORMATIONS =======$reset
$green Expression:$reset $yellow%s$reset
$green Minimum Roll:$reset $yellow%d$reset
$green Maximum Roll:$reset $yellow%d$reset
INFO;

$logOutputFormat = "$cyan %s $reset $yellow $reset";
$rollOutputFormat = "$cyan Result #%d:$reset $yellow %s$reset";

//Script start now

autoload($dependencyError);

$opts = filter_var_array(array_replace(
        ['iteration' => 1],
        getopt("h::", ['pool::', 'iteration::', 'help', 'info', 'logs'])
    ), [
    'iteration' => ['filter' => FILTER_VALIDATE_INT, 'options' => ['min_range' => 1, 'default' => 1]],
    'h' => FILTER_VALIDATE_BOOLEAN,
    'help' => FILTER_VALIDATE_BOOLEAN,
    'info' => FILTER_VALIDATE_BOOLEAN,
    'logs' => FILTER_VALIDATE_BOOLEAN,
    'pool' => ['filter' => FILTER_SANITIZE_STRING, 'flags' => FILTER_FLAG_STRIP_LOW | FILTER_FLAG_STRIP_HIGH],
]);

if (2 > count($argv) || isset($opts['help']) || isset($opts['h'])) {
    writeln($helpText);

    die(0);
}

$expression = array_pop($argv);
$expression = trim($expression);

if (0 === strpos($expression, '-')) {
    fail("$redbg Make sure your dice annotation is the last argument of your call! $reset", 65);
}

$logger = new MemoryLogger();
$factory = new Factory(new ExpressionParser(), new LogProfiler($logger));

try {
    $rollable = $factory->newInstance($expression);
} catch (Exception $exception) {
    fail(sprintf($parseErrorMessage, $expression, $exception->getMessage()), 65);
}

if (isset($opts['info'])) {
   writeln(sprintf($rollableInfo, $rollable->toString(), $rollable->minimum(), $rollable->maximum()));
}

$logger->clear();

writeln("$yellow ====== ROLL RESULTS ======= $reset");
for ($i = 0; $i < $opts['iteration']; ++$i) {
    writeln(sprintf($rollOutputFormat, $i+1, $rollable->roll()));
    if (isset($opts['logs'])) {
        flushLogger($logger, $logOutputFormat);
        writeln('');
    }
}

writeln('');
die(0);
